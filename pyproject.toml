[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "celflow"
version = "0.1.0"
description = "CelFlow - Self-Creating AI Operating System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CelFlow Team", email = "team@celflow.com"}
]
keywords = ["ai", "automation", "agents", "operating-system", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Operating System",
    "Topic :: Desktop Environment",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "typing-extensions>=4.0.0",
    
    # Data processing
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    
    # Machine learning
    "scikit-learn>=1.1.0",
    "torch>=1.12.0",
    
    # Database
    "sqlite3",  # Built-in, but listed for clarity
    
    # System integration
    "psutil>=5.9.0",
    "watchdog>=2.1.0",
    
    # macOS specific
    "rumps>=0.4.0; sys_platform == 'darwin'",
    
    # Web interface
    "flask>=2.2.0",
    "flask-cors>=3.0.0",
    
    # Utilities
    "click>=8.0.0",
    "rich>=12.0.0",
    "python-dotenv>=0.19.0",
    
    # Async support
    "asyncio",
    "aiofiles>=0.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]

[project.urls]
Homepage = "https://github.com/celflow/celflow"
Repository = "https://github.com/celflow/celflow"
Documentation = "https://celflow.readthedocs.io"
"Bug Tracker" = "https://github.com/celflow/celflow/issues"

[project.scripts]
celflow = "backend.app.main:main"
celflow-tray = "backend.scripts.celflow_tray:main"
celflow-analysis = "backend.analysis.analyze_event_data:main"

[tool.setuptools]
packages = ["backend"]

[tool.setuptools.package-dir]
"" = "."

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "rumps.*",
    "psutil.*",
    "watchdog.*",
    "sklearn.*",
    "torch.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 